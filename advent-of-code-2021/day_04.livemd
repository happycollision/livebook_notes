<!-- livebook:{"persist_outputs":true} -->

# Advent of Code Day 4: Giant Squid (bingo)

## Setup

```elixir
bingo = File.read!("./advent-of-code-2021/day_04_input.txt")

test_bingo = """
7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1

22 13 17 11  0
 8  2 23  4 24
21  9 14 16  7
 6 10  3 18  5
 1 12 20 15 19

 3 15  0  2 22
 9 18 13 17  5
19  8  7 25 23
20 11 10 24  4
14 21 16 12  6

14 21 17 24  4
10 16 15  9 19
18  8 23 26 20
22 11 13  6  5
 2  0 12  3  7
"""
```

```output
"7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1\n\n22 13 17 11  0\n 8  2 23  4 24\n21  9 14 16  7\n 6 10  3 18  5\n 1 12 20 15 19\n\n 3 15  0  2 22\n 9 18 13 17  5\n19  8  7 25 23\n20 11 10 24  4\n14 21 16 12  6\n\n14 21 17 24  4\n10 16 15  9 19\n18  8 23 26 20\n22 11 13  6  5\n 2  0 12  3  7\n"
```

## Part 1

You're already almost 1.5km (almost a mile) below the surface of the ocean, already so deep that you can't see any sunlight. What you can see, however, is a giant squid that has attached itself to the outside of your submarine.

Maybe it wants to play [bingo](https://en.wikipedia.org/wiki/Bingo_(American_version))?

Bingo is played on a set of boards each consisting of a 5x5 grid of numbers. Numbers are chosen at random, and the chosen number is marked on all boards on which it appears. (Numbers may not appear on all boards.) If all numbers in any row or any column of a board are marked, that board wins. (Diagonals don't count.)

The submarine has a bingo subsystem to help passengers (currently, you and the giant squid) pass the time. It automatically generates a random order in which to draw numbers and a random set of boards (your puzzle input). For example:

```
7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1

22 13 17 11  0
 8  2 23  4 24
21  9 14 16  7
 6 10  3 18  5
 1 12 20 15 19

 3 15  0  2 22
 9 18 13 17  5
19  8  7 25 23
20 11 10 24  4
14 21 16 12  6

14 21 17 24  4
10 16 15  9 19
18  8 23 26 20
22 11 13  6  5
 2  0 12  3  7
```

After the first five numbers are drawn (7, 4, 9, 5, and 11), there are no winners, but the boards are marked as follows (shown here adjacent to each other to save space):

<pre>
<code>22 13 17 <em>11</em>  0         3 15  0  2 22        14 21 17 24  <em>4</em>
 8  2 23  <em>4</em> 24         <em>9</em> 18 13 17  <em>5</em>        10 16 15  <em>9</em> 19
21  <em>9</em> 14 16  <em>7</em>        19  8  <em>7</em> 25 23        18  8 23 26 20
 6 10  3 18  <em>5</em>        20 <em>11</em> 10 24  <em>4</em>        22 <em>11</em> 13  6  <em>5</em>
 1 12 20 15 19        14 21 16 12  6         2  0 12  3  <em>7</em>
</code></pre>

After the next six numbers are drawn (17, 23, 2, 0, 14, and 21), there are still no winners:

<pre><code>22 13 <em>17</em> <em>11</em>  <em>0</em>         3 15  <em>0</em>  <em>2</em> 22        <em>14</em> <em>21</em> <em>17</em> 24  <em>4</em>
 8  <em>2</em> <em>23</em>  <em>4</em> 24         <em>9</em> 18 13 <em>17</em>  <em>5</em>        10 16 15  <em>9</em> 19
<em>21</em>  <em>9</em> <em>14</em> 16  <em>7</em>        19  8  <em>7</em> 25 <em>23</em>        18  8 <em>23</em> 26 20
 6 10  3 18  <em>5</em>        20 <em>11</em> 10 24  <em>4</em>        22 <em>11</em> 13  6  <em>5</em>
 1 12 20 15 19        <em>14</em> <em>21</em> 16 12  6         <em>2</em>  <em>0</em> 12  3  <em>7</em>
</code></pre>

Finally, 24 is drawn:

<pre><code>22 13 <em>17</em> <em>11</em>  <em>0</em>         3 15  <em>0</em>  <em>2</em> 22        <em>14</em> <em>21</em> <em>17</em> <em>24</em>  <em>4</em>
 8  <em>2</em> <em>23</em>  <em>4</em> <em>24</em>         <em>9</em> 18 13 <em>17</em>  <em>5</em>        10 16 15  <em>9</em> 19
<em>21</em>  <em>9</em> <em>14</em> 16  <em>7</em>        19  8  <em>7</em> 25 <em>23</em>        18  8 <em>23</em> 26 20
 6 10  3 18  <em>5</em>        20 <em>11</em> 10 <em>24</em>  <em>4</em>        22 <em>11</em> 13  6  <em>5</em>
 1 12 20 15 19        <em>14</em> <em>21</em> 16 12  6         <em>2</em>  <em>0</em> 12  3  <em>7</em>
</code></pre>

At this point, the third board wins because it has at least one complete row or column of marked numbers (in this case, the entire top row is marked: 14 21 17 24 4).

The score of the winning board can now be calculated. Start by finding the sum of all unmarked numbers on that board; in this case, the sum is 188. Then, multiply that sum by the number that was just called when the board won, 24, to get the final score, 188 * 24 = 4512.

To guarantee victory against the giant squid, figure out which board will win first. What will your final score be if you choose that board?
</pre>

```elixir
defmodule Bingo do
  def create_boards(lines) when is_list(lines) do
    lines
    |> Enum.chunk_every(5)
    |> Enum.map(&prepare_board/1)
  end

  def prepare_board(rows) when is_list(rows) do
    rows
    |> Enum.map(&prepare_row/1)
  end

  def prepare_row(row) when is_binary(row) do
    row
    |> String.split()
    |> Enum.map(&Integer.parse/1)
  end

  def mark_num(boards_or_rows, num) when is_list(boards_or_rows) do
    Enum.map(boards_or_rows, &mark_num(&1, num))
  end

  def mark_num({value, _}, num) when value == num, do: {value, "X"}
  def mark_num(tile, _), do: tile

  def tile_is_marked({_, "X"}), do: true
  def tile_is_marked({_, _}), do: false

  def board_is_winner(board) when is_list(board) do
    with false <- Enum.any?(board, &row_is_winner/1),
         false <- Enum.any?(pivot(board), &row_is_winner/1) do
      false
    else
      true -> true
    end
  end

  def pivot(board) when is_list(board) do
    board
    |> List.zip()
    |> Enum.map(&Tuple.to_list/1)
  end

  def row_is_winner(row) do
    Enum.all?(row, fn {_, mark} -> mark == "X" end)
  end

  def check_boards(boards) do
    boards
    |> Enum.with_index()
    |> Enum.reduce_while(nil, fn {board, i}, _ ->
      if board_is_winner(board) do
        {:halt, i}
      else
        {:cont, nil}
      end
    end)
  end

  def play(boards, sequence) do
    sequence
    |> Enum.reduce_while(%{boards: boards}, fn
      call, %{boards: boards} ->
        boards = mark_num(boards, call)
        winning_board = check_boards(boards)
        directive = if is_nil(winning_board), do: :cont, else: :halt
        {directive, %{last_call: call, boards: boards, winning_board: winning_board}}
    end)
    |> game_over()
  end

  def game_over(%{last_call: call, boards: boards, winning_board: winning_board}) do
    sum =
      Enum.at(boards, winning_board)
      |> as_num()
      |> Enum.map(&Enum.sum/1)
      |> Enum.sum()

    sum * call
  end

  def as_num(boards_or_rows) when is_list(boards_or_rows) do
    Enum.map(boards_or_rows, &as_num(&1))
  end

  def as_num({_, "X"}), do: 0
  def as_num({value, _}), do: value
end

[sequence | boards] =
  bingo
  |> String.split("\n", trim: true)

sequence =
  sequence
  |> String.split(",", trim: true)
  |> Enum.map(&String.to_integer/1)

boards = Bingo.create_boards(boards)

Bingo.play(boards, sequence)
```

```output
6592
```

<!-- livebook:{"branch_parent_index":0} -->

## Part Two: let the squid win

On the other hand, it might be wise to try a different strategy: let the giant squid win.

You aren't sure how many bingo boards a giant squid could play at once, so rather than waste time counting its arms, the safe thing to do is to figure out which board will win last and choose that one. That way, no matter which boards it picks, it will win for sure.

In the above example, the second board is the last to win, which happens after 13 is eventually called and its middle column is completely marked. If you were to keep playing until this point, the second board would have a sum of unmarked numbers equal to 148 for a final score of 148 * 13 = 1924.

Figure out which board will win last. Once it wins, what would its final score be?

```elixir
defmodule Bingo do
  def create_boards(lines) when is_list(lines) do
    lines
    |> Enum.chunk_every(5)
    |> Enum.map(&prepare_board/1)
  end

  def prepare_board(rows) when is_list(rows) do
    rows
    |> Enum.map(&prepare_row/1)
  end

  def prepare_row(row) when is_binary(row) do
    row
    |> String.split()
    |> Enum.map(&Integer.parse/1)
  end

  def mark_num(boards_or_rows, num) when is_list(boards_or_rows) do
    Enum.map(boards_or_rows, &mark_num(&1, num))
  end

  def mark_num({value, _}, num) when value == num, do: {value, "X"}
  def mark_num(tile, _), do: tile

  def tile_is_marked({_, "X"}), do: true
  def tile_is_marked({_, _}), do: false

  def board_is_winner(board) when is_list(board) do
    with false <- Enum.any?(board, &row_is_winner/1),
         false <- Enum.any?(pivot(board), &row_is_winner/1) do
      false
    else
      true -> true
    end
  end

  def pivot(board) when is_list(board) do
    board
    |> List.zip()
    |> Enum.map(&Tuple.to_list/1)
  end

  def row_is_winner(row) do
    Enum.all?(row, fn {_, mark} -> mark == "X" end)
  end

  def check_boards(boards) do
    boards
    |> Enum.with_index()
    |> Enum.filter(fn {board, _} -> board_is_winner(board) end)
    |> Enum.map(fn {_, i} -> i end)
  end

  def lose(boards, sequence) do
    sequence
    |> Enum.reduce_while(%{boards: boards, winning_boards: []}, fn
      call, %{boards: boards, winning_boards: prev_winning_boards} ->
        boards = mark_num(boards, call)
        winning_boards = check_boards(boards)

        if Enum.count(winning_boards) == Enum.count(boards) do
          {:halt,
           %{
             last_call: call,
             boards: boards,
             winning_boards: winning_boards,
             losing_board: (winning_boards -- prev_winning_boards) |> hd()
           }}
        else
          {:cont, %{boards: boards, winning_boards: winning_boards}}
        end
    end)
    |> game_over()
  end

  def game_over(%{last_call: call, boards: boards, losing_board: losing_board}) do
    sum =
      Enum.at(boards, losing_board)
      |> as_num()
      |> Enum.map(&Enum.sum/1)
      |> Enum.sum()

    IO.inspect(sum)
    IO.inspect(call)

    sum * call
  end

  def as_num(boards_or_rows) when is_list(boards_or_rows) do
    Enum.map(boards_or_rows, &as_num(&1))
  end

  def as_num({_, "X"}), do: 0
  def as_num({value, _}), do: value
end

[sequence | boards] =
  bingo
  |> String.split("\n", trim: true)

sequence =
  sequence
  |> String.split(",", trim: true)
  |> Enum.map(&String.to_integer/1)

boards = Bingo.create_boards(boards)

Bingo.lose(boards, sequence)
```

```output
365
87
```

```output
31755
```
