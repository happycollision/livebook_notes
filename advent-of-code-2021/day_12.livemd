# Advent of code day 12

## Setup

```elixir
test_1_input = """
start-A
start-b
A-c
A-b
b-d
A-end
b-end
"""

test_2_input = """
dc-end
HN-start
start-kj
dc-start
dc-HN
LN-dc
HN-end
kj-sa
kj-HN
kj-dc
"""

test_3_input = """
fs-end
he-DX
fs-he
start-DX
pj-DX
end-zg
zg-sl
zg-pj
pj-he
RW-he
fs-DX
pj-RW
zg-RW
start-pj
he-WI
zg-he
pj-fs
start-RW
"""

input = """
lg-GW
pt-start
pt-uq
nx-lg
ve-GW
start-nx
GW-start
GW-nx
pt-SM
sx-GW
lg-end
nx-SM
lg-SM
pt-nx
end-ve
ve-SM
TG-uq
end-SM
SM-uq
"""

prep = fn input ->
  input
  |> String.split("\n", trim: true)
  |> Enum.reduce(%{}, fn el, acc ->
    [left, right] = String.split(el, "-")

    acc
    |> Map.update(left, MapSet.new([right]), fn set -> MapSet.put(set, right) end)
    |> Map.update(right, MapSet.new([left]), fn set -> MapSet.put(set, left) end)
    |> Map.reject(fn {k, _v} -> k == "end" end)
    |> Map.map(fn {_k, v} -> MapSet.delete(v, "start") end)
  end)
  |> Map.map(fn {_k, v} -> MapSet.to_list(v) end)
end

# prep.(test_1_input)
```

## Part 1

```elixir
defmodule P do
  def is_lower(x), do: (String.to_charlist(x) |> Enum.at(0)) in ?a..?z
  def is_upper(x), do: (String.to_charlist(x) |> Enum.at(0)) in ?A..?Z

  def walk(map) do
    {seen, count} = walk(map, map["start"], [], ["start"], 0)
    count
  end

  def walk(:dead_end, seen, path, found_count) do
    # IO.inspect(Enum.reverse(path), label: "Dead end")
    {seen, found_count}
  end

  def walk(:good_path, seen, path, found_count) do
    IO.inspect(Enum.reverse(path))
    {seen, found_count + 1}
  end

  def walk(_map, [], seen, path, found_count) do
    {seen, found_count}
  end

  def walk(map, [cave | caves], seen, path, found_count) do
    {_, count} =
      cond do
        cave == "end" -> walk(:good_path, seen, [cave | path], found_count)
        cave in seen -> walk(:dead_end, seen, [cave | path], found_count)
        is_lower(cave) -> walk(map, map[cave], [cave | seen], [cave | path], found_count)
        is_upper(cave) -> walk(map, map[cave], seen, [cave | path], found_count)
      end

    walk(map, caves, seen, path, count)
  end
end

# 10 = prep.(test_1_input) |> P.walk()
# 19 = prep.(test_2_input) |> P.walk()
# 226 = prep.(test_3_input) |> P.walk()

prep.(input) |> P.walk()
```

## Part 2

```elixir
defmodule P do
  def is_lower(x), do: (String.to_charlist(x) |> Enum.at(0)) in ?a..?z
  def is_upper(x), do: (String.to_charlist(x) |> Enum.at(0)) in ?A..?Z

  def walk(map) do
    {seen, count} = walk(map, map["start"], [], ["start"], 0)
    count
  end

  def walk(:dead_end, seen, path, found_count) do
    # IO.inspect(Enum.reverse(path), label: "Dead end")
    {seen, found_count}
  end

  def walk(:good_path, seen, path, found_count) do
    # IO.inspect(Enum.reverse(path))
    {seen, found_count + 1}
  end

  def walk(_map, [], seen, path, found_count) do
    {seen, found_count}
  end

  def walk(map, [cave | caves], seen, path, found_count) do
    {_, count} =
      cond do
        cave == "end" ->
          walk(:good_path, seen, [cave | path], found_count)

        cave in seen ->
          if MapSet.new(seen) |> MapSet.size() == Enum.count(seen) do
            walk(map, map[cave], [cave | seen], [cave | path], found_count)
          else
            walk(:dead_end, seen, [cave | path], found_count)
          end

        is_lower(cave) ->
          walk(map, map[cave], [cave | seen], [cave | path], found_count)

        is_upper(cave) ->
          walk(map, map[cave], seen, [cave | path], found_count)
      end

    walk(map, caves, seen, path, count)
  end
end

36 = prep.(test_1_input) |> P.walk()

prep.(input) |> P.walk()
```
