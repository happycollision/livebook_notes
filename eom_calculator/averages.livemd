<!-- livebook:{"persist_outputs":true} -->

# EOM averages

```elixir
name = "Deidentified Public Use Baseline Episode File-CY 2020.csv"
input = "#{__DIR__}/#{name}" |> File.stream!()
```

<!-- livebook:{"output":true} -->

```
%File.Stream{
  path: "/Users/dondenton/GitProjects/livebook_notes/eom_calculator/Deidentified Public Use Baseline Episode File-CY 2020.csv",
  modes: [:raw, :read_ahead, :binary],
  line_or_bytes: :line,
  raw: true
}
```

## prep the data

```elixir
values =
  input
  |> Stream.map(&String.split(&1, ",", trim: true))

[header | _] =
  values
  |> Stream.take(1)
  |> Enum.into([])

data_stream =
  values
  |> Stream.drop(1)
  |> Stream.map(fn row ->
    Enum.zip(header, row) |> Enum.into(%{})
  end)
```

<!-- livebook:{"output":true} -->

```
"Northeast Region"
```

## filtering

Getting some filtering functions ready to go

```elixir
row_filter = fn key_filter_predicate, value_predicate ->
  fn row ->
    row
    |> Map.keys()
    |> Enum.filter(key_filter_predicate)
    |> Enum.map(&Map.get(row, &1))
    |> Enum.any?(value_predicate)
  end
end

predicate_via_kv = fn {k, v} ->
  row_filter.(
    &String.equivalent?(&1, k),
    fn x -> x === v end
  )
end

is_midwest = predicate_via.("pgp_id_region", "Midwest Region")
is_northeast = predicate_via.("pgp_id_region", "Northeast Region")
is_south = predicate_via.("pgp_id_region", "South Region")
is_west = predicate_via.("pgp_id_region", "West Region")
is_rural = predicate_via.("forhp_rural_ind", "1")
is_not_rural = predicate_via.("forhp_rural_ind", "0")

national = {"National, Both", []}
national_rural = {"National, Rural", [is_rural]}
national_urban = {"National, Urban", [is_not_rural]}

midwest = {"Midwest, Both", [is_midwest]}
midwest_rural = {"Midwest, Rural", [is_midwest, is_rural]}
midwest_urban = {"Midwest, Urban", [is_midwest, is_not_rural]}

south = {"South, Both", [is_south]}
south_rural = {"South, Rural", [is_south, is_rural]}
south_urban = {"South, Urban", [is_south, is_not_rural]}

northeast = {"Northeast, Both", [is_northeast]}
northeast_rural = {"Northeast, Rural", [is_northeast, is_rural]}
northeast_urban = {"Northeast, Urban", [is_northeast, is_not_rural]}

west = {"west, Both", [is_west]}
west_rural = {"west, Rural", [is_west, is_rural]}
west_urban = {"west, Urban", [is_west, is_not_rural]}

predicate_groupings = [
  national,
  national_rural,
  national_urban,
  midwest,
  midwest_rural,
  midwest_urban,
  south,
  south_rural,
  south_urban,
  northeast,
  northeast_rural,
  northeast_urban,
  west,
  west_rural,
  west_urban
]
```

<!-- livebook:{"output":true} -->

```
#Function<42.3316493/1 in :erl_eval.expr/6>
```

## averages

Gets all the counts for each cancer type and then divides the Raw Total Standardized cost by those counts.

The result is

```
{type_of_cancer, {count, cost_per_person}}
```

```elixir
to_averages = fn
  data_stream ->
    data_stream
    |> Enum.reduce(%{}, fn row, acc ->
      Map.update(acc, row["cancer_type"], {0, 0}, fn
        {count, cost} ->
          num =
            if(String.contains?(row["raw_total_std"], "."),
              do: row["raw_total_std"],
              else: row["raw_total_std"] <> ".00"
            )
            |> String.to_float()

          [num | _] = Float.round(num * 100) |> Float.to_string() |> String.split(".")
          num = num |> String.to_integer()

          {count + 1, cost + num}
      end)
    end)
    |> then(&Map.to_list/1)
    |> Enum.map(fn {kind, {count, cost}} ->
      {kind, {count, (cost / 100 / count) |> Float.round(2)}}
    end)
end

[
  national: to_averages.(data_stream),
  midwest: data_stream |> Stream.filter(is_midwest) |> to_averages.(),
  west: data_stream |> Stream.filter(is_west) |> to_averages.(),
  northeast: data_stream |> Stream.filter(is_northeast) |> to_averages.(),
  south: data_stream |> Stream.filter(is_south) |> to_averages.()
]
```

<!-- livebook:{"output":true} -->

```
[
  national: [
    {"Breast Cancer", {40320, 47887.36}},
    {"Chronic Leukemia", {14931, 58847.34}},
    {"Lung Cancer", {41387, 65340.92}},
    {"Lymphoma", {21582, 56655.6}},
    {"Multiple Myeloma", {27421, 87998.36}},
    {"Prostate Cancer", {18754, 49102.89}},
    {"Small Intestine / Colorectal Cancer", {20370, 39206.69}}
  ],
  midwest: [
    {"Breast Cancer", {8653, 49007.68}},
    {"Chronic Leukemia", {3615, 59504.91}},
    {"Lung Cancer", {10002, 65192.76}},
    {"Lymphoma", {4892, 57181.05}},
    {"Multiple Myeloma", {6140, 87094.63}},
    {"Prostate Cancer", {4241, 48607.69}},
    {"Small Intestine / Colorectal Cancer", {4740, 40163.45}}
  ],
  west: [
    {"Breast Cancer", {8010, 47304.54}},
    {"Chronic Leukemia", {2755, 59229.77}},
    {"Lung Cancer", {6736, 68128.62}},
    {"Lymphoma", {4216, 57399.92}},
    {"Multiple Myeloma", {5202, 88751.64}},
    {"Prostate Cancer", {4182, 49121.62}},
    {"Small Intestine / Colorectal Cancer", {3676, 39189.98}}
  ],
  northeast: [
    {"Breast Cancer", {7522, 47548.2}},
    {"Chronic Leukemia", {2976, 59073.06}},
    {"Lung Cancer", {7856, 65479.17}},
    {"Lymphoma", {4182, 57627.45}},
    {"Multiple Myeloma", {5461, 90802.26}},
    {"Prostate Cancer", {3876, 46550.58}},
    {"Small Intestine / Colorectal Cancer", {3671, 40184.65}}
  ],
  south: [
    {"Breast Cancer", {16073, 47785.74}},
    {"Chronic Leukemia", {5568, 58117.49}},
    {"Lung Cancer", {16759, 64247.92}},
    {"Lymphoma", {8272, 55507.36}},
    {"Multiple Myeloma", {10572, 86775.9}},
    {"Prostate Cancer", {6426, 51004.09}},
    {"Small Intestine / Colorectal Cancer", {8251, 38275.05}}
  ]
]
```
